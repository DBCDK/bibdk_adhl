<?php

module_load_include('inc', 'bibdk_adhl', 'bibdk_adhl.worktabs');

/**
 * Implements hook_menu
 */
function bibdk_adhl_menu() {
  $items['adhl/ajax'] = array(
    'page callback' => 'bibdk_adhl_ajax_get_recommendations',
    #'page arguments' => array('id' => 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'bibdk_adhl.ajax.inc',
  );
  return $items;
}

/**
 * Show list of recommendations
 *
 * @param $pid
 * @return string
 */
function bibdk_adhl_get_adhl_view($pid) {
  $result = bibdk_adhl_get_adhl($pid);
  $view =  bibdk_adhl_get_link_list_view($result, '_blank');
  if ($view == null){
    $view = t('bibdk_adhl_no_recommendations');
  }


  $elements = array(
    '#type' => 'fieldset',
    '#title' => t('adhl_title'),
    '#description' => t('adhl_description'),
    'list' => array(
      '#markup' => $view,
    ),
  );
  return drupal_render($elements);
}

/** get manifestations from adhl
 * @param $pid
 * @return array
 */
function bibdk_adhl_get_adhl($pid, $number_of_results = 10){
  $result = bibdk_adhl_request($pid, $number_of_results);
  if (empty($result)) {
    return array();
  }
  return bibdk_adhl_get_manifestations($result);
}


/**
 * Execute adhl request
 * @param int $numResults
 * @internal param $pid
 * @return array
 */
function bibdk_adhl_request($pid, $numResults) {

  //Split pids at delimiter
  $id = explode(";", $pid);

  //make array off pids
  $pids = array();
  foreach ($id as $singlepid)  {
    $pids[] = $singlepid;
  }

  //make param used for request with pid-list
  $param = array(
    'id' => array( 'pid' => $pids),
    'numResults' => $numResults,
  );

  $client = new ting_client_class();

  $reponse = $client->do_request('recommendation', $param);

  return bibdk_adhl_parse_response($reponse);

}

/** Parse response from adhl request
 * @param $response
 * @return array
 */
function bibdk_adhl_parse_response($response){
  if(!isset($response->pid) || empty($response->pid))
    return array();

  $pids = array();
  foreach($response->pid as $recommendation){
    $pids[] = $recommendation->{'$'};
  }
  return $pids;


}

/**
 * Return a list of links from a list of manifestations
 *
 * @param $pids
 * @return string html formatted list of links
 */
function bibdk_adhl_get_link_list_view($manifestations, $target = '_self') {

  if(empty($manifestations))
    return null;

  foreach ($manifestations as $id => $manifestation) {
    $links[] = array(
      'title' => $manifestation->getTitle(),
      'href'  => 'work/' . $id,
      'attributes' => array(
        'target' => $target,
        'title' => _ting_openformat_parse_element($manifestation->getCreator(), ', ', FALSE, FALSE) . ' : ' . _ting_openformat_parse_element($manifestation->getAbstract(), ', ', FALSE, FALSE),
      )
    );
  }
  return theme('links', array(
    'links' => $links,
  ));

}

/** Wrapper for ting_openformat_get_manifestations. Get manifestations for an
 *  array of pid's
 * @param $pids
 * @return array
 */
function bibdk_adhl_get_manifestations($pids){
  /**
   * ting_openformat_get_manifestations returns a bibdkWork as an array and all
   * the manifestations are saved in the manifestations variable.
   * TODO :ting_openformat should have a method to return an array of manifestations
   */
  $works = ting_openformat_get_manifestations($pids);
  $work = reset($works);
  if (!isset($work->manifestations))
    return array();

  else return $work->manifestations;
}
